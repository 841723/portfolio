---
import "src/styles/markdown.css";
import Layout from '@/layouts/Layout.astro';
import Section from '@/components/Section.astro';
import WriteupList from "@/components/WriteupList.astro";
import { tcommons } from "@/i18n";

const title = `Writeups - Diego Roldan`;
const description = `All Writeups for machines on Hack The Box.`;

const buttonsFilter = [
    {
        label: 'Easy',
        color: 'bg-green-600',
        colorHover: 'hover:bg-green-700'
    },
    {
        label: 'Medium',
        color: 'bg-yellow-600',
        colorHover: 'hover:bg-yellow-700'
    },
    {
        label: 'Hard',
        color: 'bg-red-600',
        colorHover: 'hover:bg-red-700'
    },
    {
        label: 'Insane',
        color: 'bg-purple-600',
        colorHover: 'hover:bg-purple-700'
    }
];

const locale = Astro.props.locale || "en"
const t = tcommons(locale);

---

<Layout title={title} description={description} doGradient={false} locale={locale}>
  <main class="flex flex-col items-center w-full max-w-[740px] mx-auto">
    <Section title="nav-writeups" id="writeups" locale={locale}>
        <p class="text-lg">
            {t("writeups-description")}
        </p>

        <p class="text-lg">
            {t("writeups-feelfree")}
        </p>

        <p class="text-lg mt-10">
            {t("writeups-search")}
        </p>

        <input id="searchInput" placeholder={t("writeups-inputplaceholder") as string} class="my-2 p-2 w-full border-2 border-gray-400 rounded-lg" />
        <div
            class="mb-6 flex flex-wrap gap-2 justify-center">
             {buttonsFilter.map((label) => {
                const translatedLabel = t(`writeups-${label.label.toLowerCase()}`) ?? "Search...";
                return (
                <button 
                    data-filter={label.label}
                    class={`filterButton py-1 rounded-full font-bold border-2 w-28 items-center transition-colors ${label.color} ${label.colorHover}`}
                >
                    {(translatedLabel.at(0) as string).toUpperCase() + translatedLabel.slice(1)}
                </button>
                );
            })}
        </div>
        <script>
            const input = document.getElementById('searchInput') as HTMLInputElement;
            const writeups = document.querySelectorAll('#writeupList a') as NodeListOf<HTMLAnchorElement>;
            const filterButtons = document.querySelectorAll('.filterButton') as NodeListOf<HTMLButtonElement>;
            const buttonsFilter = [
                {
                    label: 'Easy',
                    color: 'bg-green-600',
                    colorHover: 'hover:bg-green-700'
                },
                {
                    label: 'Medium',
                    color: 'bg-yellow-600',
                    colorHover: 'hover:bg-yellow-700'
                },
                {
                    label: 'Hard',
                    color: 'bg-red-600',
                    colorHover: 'hover:bg-red-700'
                },
                {
                    label: 'Insane',
                    color: 'bg-purple-600',
                    colorHover: 'hover:bg-purple-700'
                }
            ];
            const filtersObj = buttonsFilter.reduce((acc: Record<string, { state: boolean; color: string, colorHover: string }>, key: { label: string; color: string, colorHover: string }) => {
                acc[key.label.toLowerCase()] = {
                    state: true,
                    color: key.color,
                    colorHover: key.colorHover
                };
                return acc;
            }, {});
            
            function filterWriteups() {
                const filterText = input?.value.toLowerCase();

                writeups.forEach((writeup) => {
                    const name = writeup.querySelector('.writeup-item-name')?.textContent?.toLowerCase() || '';
                    // const tags = writeup.querySelector('.writeup-item-tags')?.textContent?.toLowerCase() || '';
                    const difficulty = writeup.querySelector('.writeup-item-difficulty')?.getAttribute('data-difficulty')?.toLowerCase() || '';
                    
                    if (
                        (difficulty && filtersObj[difficulty].state) &&
                        (name.includes(filterText) /* || tags.includes(filterText) */)
                    ) {
                        writeup.style.display = '';
                    } else {
                        writeup.style.display = 'none';
                    }
                });
            }

            input.addEventListener('keyup', filterWriteups);
            filterButtons.forEach((button) => {
                button.addEventListener('click', () => {
                    const filter = button.getAttribute('data-filter')?.toLowerCase();

                    if (filter && filtersObj.hasOwnProperty(filter)) {
                        console.log('Toggling filter:', filter);
                        filtersObj[filter].state = !filtersObj[filter].state;
                        button.classList.toggle(filtersObj[filter].color);
                        button.classList.toggle(filtersObj[filter].colorHover);
                        button.classList.toggle('bg-gray-700');
                        button.classList.toggle('hover:bg-gray-800');
                    }

                    filterWriteups();
                });
            });

        </script>
        <WriteupList onlyButtons={false} showAll={true} showLocked={true} locale={locale} />
    </Section>
    </main>
</Layout> 